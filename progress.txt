3/3/24

Today I had to reinstall xcode developer tools to get go working on my mac.  I don't know why those things
were needed.  But things are working again.

I also refactored how creating a player works.  Now, a player name is created client side and sent to the server.
Players now have a uuid, I will need to make sure this is working as I will have to leverage UUID for Players
and Pokemon as they battle eachother.

Also, the game logic needs a turn based system where one player goes at a time and the other is locked up.  For simplicity,
this will start with the host being the first player to go.

SMART GOAL: implement all of these features by the end of spring break.

3/4/24

Added a fighting pokemon slice that is a pointer to pokemon in the game.  This errored out and was empty though it should not be.

3/6/24
pkmn ids working now! I got the first damages done over the server.
PROBLEM: only one pokemon is getting attacked by both players.

3/8/24
Today's goal is to set up turn based game logic. DONE. TODO: implement client side turn logic

3/10/24
I refactored the game call and server response to creating a player so that the player struct gets returned to the client.
I have turn based kind of working in the CLI

3/11/24
I confirmed that the TurnTaker switches properly the first time but does not change on any subsequent calls
This is also reflected in a test.  THE PROBLEM: I am using *uuid.UUID for TurnTaker, so when I am swapping assignments, I am swapping
memory address locations.  On the second swap, I lose the memory address of one of the IDs... I think.  No, it was because
I had the `current` variable set in the wrong spot, so it was resetting on each loop.  This caused the loop to run an incorrect number
of times and reset the TurnTaker variable to what it originally was.  

I ran a full successful game taking turns in the CLI

TODO: Get logging in CLI to be more useful

3/14/24

I will definitely not be able to finish this whole project but it was nice to get me started with
containerizing a Go app.  The last piece I want to put together is implementing a docker compose file that stands up
postgres and sends some simple data to it.  This I think will bring home what I wanted to figure out how to do, which was containerize
an app and have some persistent data.  My presentation will focus on docker and what it does with this app.

3/15/24 8:32 PM

Currently working on updating the client.go file to be organized better.  Its a mess.  I realized that the function for adding pokemon to a player is horribly set up, passing a 
string of player name instead of using UUID.  Fixing this now.

abstractions made so far
	joinAndWait()
	playerChoosePokemon()
	findOpponent()

by instantiating player and opponent separate from game, I am running into an issue where opponent and player may not update with game.  I think this is because the
reference becomes a locally addressed thing, so changing game doesn't mean it changes the same player or opponent I think it does?

I probably shoud just pull player and opponent off game ?  As in, the first player to join becomes player and the next to join becomes opponent.  Yea lets fkin do it.
I updated everything in the server side, so this should all be working properly now.  I just need to update the client side.

Host and Opponent naming should be agnostic to who is making the calls.  Host will always be whoever started the game and opponent is whoever connected to the game

This is actually really bad because of how client works.  I have to be explicit about who is doing what.  Maybe Host and Connected are better names.

OR I can have client keep track of "host" and make calls off that ?

3/16/24

Here is the client logic that I should follow: if is host, attack opponent.  If is opponent (not host) attack host. <- implemented
*Next Step*: create a docker compose file that builds in a postgres image/container to the app.  Also use that compose file to create a volume that persists data.  This first
volume will store completed games.  After this, create a game history menu in the CLI that reads this information.

3/18/24

My next task is to connect to a postgres db, but I am not sure how that plays out.  Do I *need* a compose file?  Can I just layer pg into my Dockerfile ? (Probably the latter).
After that, I want to create all the logic behing storing and retrieving games played.

I have successfully connected!

3/24/24

I am going to create a JSONB focused table in postgres that will contain game data at the end of a game.  I'll add a conditional
to the log game state function that sends game to postgres.  I'll start by building the postgres functionality for this 
in database.go.

I have a handful of nuances that I should work out for the game playing logic in client.go.  It is pretty rough right now.  I think that storing to
the database does not work for non host client side.  

Current ISSUE: In the game, while the container is running, I am failing to connect to the database.  I am not sure why this is.
Maybe messages can't get out?