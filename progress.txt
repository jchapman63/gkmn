3/3/24

Today I had to reinstall xcode developer tools to get go working on my mac.  I don't know why those things
were needed.  But things are working again.

I also refactored how creating a player works.  Now, a player name is created client side and sent to the server.
Players now have a uuid, I will need to make sure this is working as I will have to leverage UUID for Players
and Pokemon as they battle eachother.

Also, the game logic needs a turn based system where one player goes at a time and the other is locked up.  For simplicity,
this will start with the host being the first player to go.

SMART GOAL: implement all of these features by the end of spring break.

3/4/24

Added a fighting pokemon slice that is a pointer to pokemon in the game.  This errored out and was empty though it should not be.

3/6/24
pkmn ids working now! I got the first damages done over the server.
PROBLEM: only one pokemon is getting attacked by both players.

3/8/24
Today's goal is to set up turn based game logic. DONE. TODO: implement client side turn logic

3/10/24
I refactored the game call and server response to creating a player so that the player struct gets returned to the client.
I have turn based kind of working in the CLI

3/11/24
I confirmed that the TurnTaker switches properly the first time but does not change on any subsequent calls
This is also reflected in a test.  THE PROBLEM: I am using *uuid.UUID for TurnTaker, so when I am swapping assignments, I am swapping
memory address locations.  On the second swap, I lose the memory address of one of the IDs... I think.  No, it was because
I had the `current` variable set in the wrong spot, so it was resetting on each loop.  This caused the loop to run an incorrect number
of times and reset the TurnTaker variable to what it originally was.  

I ran a full successful game taking turns in the CLI

TODO: Get logging in CLI to be more useful

3/14/24

I will definitely not be able to finish this whole project but it was nice to get me started with
containerizing a Go app.  The last piece I want to put together is implementing a docker compose file that stands up
postgres and sends some simple data to it.  This I think will bring home what I wanted to figure out how to do, which was containerize
an app and have some persistent data.  My presentation will focus on docker and what it does with this app.